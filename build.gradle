plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'maven-publish'
}

group 'com.microsoft.playwright.jmeter'
version '0.4.2'

repositories {
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    // https://mvnrepository.com/artifact/com.microsoft.playwright/playwright
    // TODO : Update once https://github.com/apache/jmeter/issues/5322 is fixed, scheduled in 5.6
    implementation group: 'org.apache.jmeter', name: 'ApacheJMeter_core', version: '5.1'
    extraLibs 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3'
    extraLibs 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.1.0"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    configurations.implementation.extendsFrom(configurations.extraLibs)
}

jar {
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    // Comment any of the below to get smaller JAR files.
//    exclude ('**/driver/linux-arm64/**')
//    exclude ('**/driver/win32_x64/**')
//    exclude ('**/driver/mac/**')
//    exclude ('**/driver/linux/**')
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

kotlin {
    jvmToolchain(17)
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/tonybaloney/jmeter-playwright")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(Copy).configureEach { duplicatesStrategy 'exclude' }

